<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

    <context:property-placeholder location="/WEB-INF/application.properties"/>

    <mvc:annotation-driven />
    <context:component-scan base-package="org.rickosborne.api.badger.controller"/>

    <bean id="datasource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" lazy-init="true">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="${jdbc.url}" />
        <property name="initialSize" value="1" />
        <property name="maxActive" value="1" />
        <property name="maxIdle" value="1" />
        <property name="poolPreparedStatements" value="true" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="datasource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
            </props>
        </property>
    </bean>

    <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="showSql" value="true"/>
        <property name="generateDdl" value="true"/>
        <property name="database" value="MYSQL"/>
    </bean>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="datasource"/>
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>
        <!-- spring based scanning for entity classes>-->
        <property name="packagesToScan" value="org.rickosborne.api.badger"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <jpa:repositories
            base-package="org.rickosborne.api.badger.data"
            entity-manager-factory-ref="entityManagerFactory"
            transaction-manager-ref="transactionManager"/>

    <sec:http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="authenticationManager">
        <sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <sec:anonymous enabled="false" />
        <sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
    </sec:http>

    <sec:http authentication-manager-ref="authenticationManager" use-expressions="true" realm="badgerMobile" auto-config="true">
        <sec:intercept-url pattern="/users*" access="ROLE_TRUSTED_USER" />
        <sec:intercept-url pattern="/users*" access="ROLE_USER" />
    </sec:http>
    <!--<sec:http entry-point-ref="oauthAuthenticationEntryPoint" authentication-manager-ref="authenticationManager" use-expressions="true" realm="badgerMobile">-->
        <!--&lt;!&ndash;<sec:intercept-url pattern="/**" access="#oauth2.hasScope('read')" />&ndash;&gt;-->
        <!--&lt;!&ndash;<sec:intercept-url pattern="/**" access="#oauth2.hasScope('write')" />&ndash;&gt;-->
        <!--<sec:intercept-url pattern="/users*" access="ROLE_TRUSTED_USER" />-->
        <!--<sec:intercept-url pattern="/users*" access="ROLE_USER" />-->
        <!--<sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />-->
        <!--<sec:access-denied-handler ref="oauthAccessDeniedHandler" />-->
    <!--</sec:http>-->
    <sec:global-method-security secured-annotations="enabled" pre-post-annotations="enabled">
        <sec:expression-handler ref="oauthExpressionHandler" />
    </sec:global-method-security>
    <oauth2:expression-handler id="oauthExpressionHandler" />
    <oauth2:web-expression-handler id="oauthWebExpressionHandler" />
    <!--
    <bean class="org.rickosborne.api.badger.service.ClientAndUserDetailsService" id="clientAndUserDetailsService">
        <constructor-arg type="org.springframework.security.oauth2.provider.ClientDetailsService"/>
        <constructor-arg type="org.springframework.security.core.userdetails.UserDetailsService"/>
    </bean>

    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider user-service-ref="clientAndUserDetailsService">
            <sec:password-encoder hash="md5" base64="true">
            </sec:password-encoder>
        </sec:authentication-provider>
    </sec:authentication-manager>
    <bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
        <sec:filter-chain-map path-type="ant">
            <sec:filter-chain pattern="/images/*" filters="none"/>
            <sec:filter-chain pattern="/**" filters="securityContextFilter, logoutFilter, formLoginFilter, servletApiFilter, anonFilter, exceptionTranslator, filterSecurityInterceptor, customFilter1, customeFilter2" />
        </sec:filter-chain-map>
    </bean>
    -->
    <sec:authentication-manager id="authenticationManager">
        <sec:authentication-provider>
            <sec:password-encoder ref="bcryptEncoder" />
            <sec:jdbc-user-service data-source-ref="datasource"
                    users-by-username-query="SELECT email AS username, password, isEnabled AS enabled FROM user WHERE (email = ?)"
                    authorities-by-username-query="SELECT u.email AS username, CONCAT('ROLE_',a.authority) AS rolename FROM user AS u INNER JOIN authorities AS a ON (u.email = ?) AND (u.isEnabled = 1) AND (((u.isAdmin = 1) AND (a.authority = 'TRUSTED_USER')) OR (a.authority = 'USER'))"/>
        </sec:authentication-provider>
    </sec:authentication-manager>
    <oauth2:resource-server id="resourceServerFilter" authentication-manager-ref="authenticationManager" token-services-ref="tokenServices" resource-id="badgerMobile" />
    <bean id="oauthAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="badgerMobile" />
    </bean>
    <bean id="clientAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="badgerMobile"/>
        <property name="typeName" value="Basic"/>
    </bean>
    <bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
    <bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
    </bean>

    <bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails" />
    </bean>

    <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />

    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore"/>
        <property name="supportRefreshToken" value="true"/>
        <property name="accessTokenValiditySeconds" value="300000"/>
        <property name="clientDetailsService" ref="clientDetails"/>
    </bean>

    <bean id="clientDetails" class="org.springframework.security.oauth2.provider.client.InMemoryClientDetailsService" />

    <bean id="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <constructor-arg type="int" value="10" />
    </bean>

</beans>